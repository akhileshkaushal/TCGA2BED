/*
 * Application: TCGA2BED
 * Version: 1.0
 * Author: Fabio Cumbo
 * Organization: Institute for Systems Analysis and Computer Science "Antonio Ruberti" - National Research Council of Italy
 *
 */
package tcga2bed;

import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.DefaultCaret;
import javax.swing.text.StyledDocument;
import tcga2bed.action.Action;
import tcga2bed.action.DownloadTCGADataFastAction;
import tcga2bed.action.DownloadTCGAMetaAction;
import tcga2bed.action.TCGA2GenDataAction;
import tcga2bed.util.ConfigLoader;
import tcga2bed.util.HTTPExpInfo;

/**
 *
 * @author Fabio
 */
public class GUI extends javax.swing.JFrame {

    private static boolean gui_mode = false;
    private static String dataSource = "";
    private static String metaSource = "";

    /**
     * Creates new form NewJFrame
     */
    public GUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        metadata_radioButton = new javax.swing.JRadioButton();
        jButton2 = new javax.swing.JButton();
        experiments_radioButton = new javax.swing.JRadioButton();
        jButton3 = new javax.swing.JButton();
        jComboBox5 = new javax.swing.JComboBox();
        jComboBox1 = new javax.swing.JComboBox();
        jComboBox6 = new javax.swing.JComboBox();
        jComboBox2 = new javax.swing.JComboBox();
        jButton4 = new javax.swing.JButton();
        jComboBox3 = new javax.swing.JComboBox();
        jComboBox4 = new javax.swing.JComboBox();
        jCheckBox1 = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        DefaultCaret caret = (DefaultCaret)jTextPane1.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jComboBox7 = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TCGA2BED v1.0");
        setResizable(false);

        buttonGroup1.add(metadata_radioButton);
        metadata_radioButton.setSelected(true);
        metadata_radioButton.setText("Metadata");
        metadata_radioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metadata_radioButtonActionPerformed(evt);
            }
        });

        jButton2.setText("Select Folder");
        jButton2.setMaximumSize(new java.awt.Dimension(73, 20));
        jButton2.setMinimumSize(new java.awt.Dimension(73, 20));
        jButton2.setPreferredSize(new java.awt.Dimension(73, 20));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        buttonGroup1.add(experiments_radioButton);
        experiments_radioButton.setText("Experiments");
        experiments_radioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                experiments_radioButtonActionPerformed(evt);
            }
        });

        jButton3.setText("Select Folder");
        jButton3.setMaximumSize(new java.awt.Dimension(73, 20));
        jButton3.setMinimumSize(new java.awt.Dimension(73, 20));
        jButton3.setPreferredSize(new java.awt.Dimension(73, 20));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jComboBox5.setModel(new javax.swing.DefaultComboBoxModel(Settings.getDataTypes4Conversion()));
        jComboBox5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox5ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(Settings.getDiseases()));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jComboBox6.setModel(new javax.swing.DefaultComboBoxModel(Settings.getDiseases()));
        jComboBox6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox6ActionPerformed(evt);
            }
        });

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(Settings.getDataTypes4Download()));
        jComboBox2.setEnabled(false);
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jButton4.setText("Convert");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel(Settings.getPlatforms()));
        jComboBox3.setEnabled(false);

        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel(Settings.getLevels()));
        jComboBox4.setEnabled(false);

        jCheckBox1.setSelected(true);
        jCheckBox1.setText("Decompress package after download");

        jButton1.setText("Download");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel7.setText("Converter:");

        jLabel1.setText("TCGA2BED");

        jLabel2.setText("Downloader:");

        jLabel9.setText("Disease:");

        jLabel3.setText("Disease:");

        jLabel4.setText("Data Type:");

        jLabel10.setText("Data Type:");

        jLabel5.setText("Platform:");

        jLabel11.setText("Data Source:");

        jLabel6.setText("Level:");

        jLabel12.setText("Meta Biotab Source:");

        jTextPane1.setEditable(false);
        jTextPane1.setText("TCGA2BED Console ");
        jScrollPane2.setViewportView(jTextPane1);

        jButton5.setText("?");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Load Configuration File");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Select Folder");
        jButton7.setEnabled(false);
        jButton7.setMaximumSize(new java.awt.Dimension(73, 20));
        jButton7.setMinimumSize(new java.awt.Dimension(73, 20));
        jButton7.setPreferredSize(new java.awt.Dimension(73, 20));
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jLabel13.setText("Mage-Tab Source:");

        jLabel8.setText("Output Format:");

        jComboBox7.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "BED", "GTF", "CSV", "XML", "JSON" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(jSeparator1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(metadata_radioButton)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(experiments_radioButton)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jComboBox1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jComboBox2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jComboBox3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jComboBox4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addComponent(jCheckBox1)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel13)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jComboBox6, 0, 289, Short.MAX_VALUE)
                                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE)
                                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE)
                                    .addComponent(jComboBox5, 0, 289, Short.MAX_VALUE)
                                    .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE)
                                    .addComponent(jComboBox7, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(0, 10, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton6)
                        .addGap(18, 18, 18)
                        .addComponent(jButton5)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jButton5)
                    .addComponent(jButton6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(24, 24, 24)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(jComboBox6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox5, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton4))
                    .addComponent(jSeparator2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(metadata_radioButton)
                            .addComponent(experiments_radioButton))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jCheckBox1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void metadata_radioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_metadata_radioButtonActionPerformed
        jComboBox2.setEnabled(false);
        jComboBox3.setEnabled(false);
        jComboBox4.setEnabled(false);
    }//GEN-LAST:event_metadata_radioButtonActionPerformed

    private void experiments_radioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_experiments_radioButtonActionPerformed
        jComboBox2.setEnabled(true);
        //jComboBox3.setEnabled(true);
        //jComboBox4.setEnabled(true);
    }//GEN-LAST:event_experiments_radioButtonActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Select Data Source Folder");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);
        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            dataSource = chooser.getSelectedFile().getAbsolutePath();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Select Meta Biotab Source Folder");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);
        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            metaSource = chooser.getSelectedFile().getAbsolutePath();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Select Output Folder");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);
        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            String outFolder = chooser.getSelectedFile().getAbsolutePath()+"/";
            if (metadata_radioButton.isSelected()) {
                if (!getDisease_forDownloader().trim().equals("")) {
                    try {
                        Thread thread = new Thread() {
                            @Override
                            public void run() {
                                String[] args = new String[4];
                                args[0] = "downloadmeta";
                                args[1] = getDisease_forDownloader();
                                args[2] = "C";
                                args[3] = outFolder;
                                Action action = new DownloadTCGAMetaAction();
                                action.setParameters(getAutoExtractFlag());
                                action.execute(args);
                            }
                        };
                        thread.start();
                    } catch (Exception e) {
                    }
                } else {
                    printText("> Select a disease first", true);
                }
            } else if (experiments_radioButton.isSelected()) {
                if (getDisease_forDownloader().trim().equals("")) {
                    printText("> Select a disease first", true);
                } else if (getDataType_forDownloader().trim().equals("")) {
                    printText("> Select a data type first", true);
                } else if (getPlatform_forDownloader().trim().equals("")) {
                    printText("> Select a platform first", true);
                } else if (getLevel_forDownloader().trim().equals("")) {
                    printText("> Select a level first", true);
                } else {
                    try {
                        Thread thread = new Thread() {
                            @Override
                            public void run() {
                                Action action;
                                //if (Settings.fastDownload()) {
                                    action = new DownloadTCGADataFastAction();
                                //} else {
                                    //action = new DownloadTCGADataAction();
                                //}
                                
                                String[] args = new String[4];
                                /*args[0] = "downloaddatafast";
                                args[1] = getPlatform_forDownloader();
                                args[2] = "1";
                                args[3] = getLevel_forDownloader();
                                args[4] = getDisease_forDownloader();
                                args[5] = retrieveInfoFromDataType(getDataType_forDownloader(), 0);
                                args[6] = outFolder;*/
                                args[0] = "downloaddatafast";
                                args[1] = getDisease_forDownloader();
                                args[2] = retrieveDataTypeExtendedInfoReverse(getDataType_forDownloader());
                                args[3] = outFolder;
                                
                                action.setParameters(getAutoExtractFlag());
                                action.execute(args);
                            }
                        };
                        thread.start();
                    } catch (Exception e) {
                    }
                }
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Select Output Folder");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);
        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            String outFolder = chooser.getSelectedFile().getAbsolutePath()+"/";
            if (getDisease_forConverter().trim().equals("")) {
                printText("> Select a disease first", true);
            } else if (getDataType_forConverter().trim().equals("")) {
                printText("> Select a data type first", true);
            } else if (getDataSource_forConverter().trim().equals("")) {
                printText("> Select a data source folder first", true);
            } else if (getMetaSource_forConverter().trim().equals("")) {
                printText("> Select a meta source folder first", true);
            } else {
                try {
                    Thread thread = new Thread() {
                        @Override
                        public void run() {
                            String[] args = new String[14];
                            args[0] = "convert";
                            args[1] = getDisease_forConverter();
                            args[2] = getMetaSource_forConverter();
                            args[3] = "null";
                            args[4] = getDataSource_forConverter();
                            args[5] = outFolder;
                            args[6] = retrieveInfoFromDataType(getDataType_forConverter(), 0);
                            args[7] = retrieveInfoFromDataType(getDataType_forConverter(), 1);
                            args[8] = Settings.getNCBIArchive();
                            args[9] = Settings.getUCSCArchive();
                            args[10] = Settings.getMIRBASEArchive();
                            args[11] = Settings.getHGNCArchive();
                            
                            args[12] = Settings.getMAGETABPath();
                            args[13] = (String)jComboBox7.getSelectedItem();
                            Action action = new TCGA2GenDataAction();
                            action.execute(args);
                        }
                    };
                    thread.start();
                } catch (Exception e) {
                }
            }
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        try {
            java.awt.Desktop.getDesktop().browse(new URI(Settings.getHelpURL()));
        } catch (URISyntaxException | IOException e) {
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter xmlfilter = new FileNameExtensionFilter("xml files (*.xml)", "xml");
        chooser.setFileFilter(xmlfilter);
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Select XML Config File");
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);
        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            String configFilePath = chooser.getSelectedFile().getAbsolutePath();
            ConfigLoader.loadConfig(configFilePath);
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Select Mage-Tab Source Folder");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);
        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            Settings.setMAGETABPath(chooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        String selectedDisease = jComboBox1.getSelectedItem().toString().trim().toLowerCase();
        //System.out.println(selectedDisease);
        HTTPExpInfo.initDiseaseInfo();
        HashMap<String, HashMap<String, String>> diseaseMap = HTTPExpInfo.getDiseaseInfo();
        HashMap<String, String> diseaseData = diseaseMap.get(selectedDisease);
        HashSet<String> dataTypesExt = new HashSet<>();
        for (String dt_tmp: diseaseData.keySet()) {
            String dt = dt_tmp.split("_")[0];
            String ext = retrieveDataTypeExtendedInfo(dt);
            if (!ext.trim().equals(""))
                dataTypesExt.add(ext);
        }
        ArrayList<String> dataTypesExtSorted = new ArrayList<>(dataTypesExt);
        dataTypesExtSorted.add("");
        Collections.sort(dataTypesExtSorted);
        /*for (String s: dataTypesExtSorted)
            System.err.println(s);
        System.err.println();*/
        jComboBox2.removeAllItems();
        for (String dts: dataTypesExtSorted)
            jComboBox2.addItem(dts);
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        try {
            String selectedDisease = jComboBox1.getSelectedItem().toString().trim().toLowerCase();
            String selectedDataType = jComboBox2.getSelectedItem().toString().trim().toLowerCase();
            //System.out.println(selectedDisease);
            HTTPExpInfo.initDiseaseInfo();
            HashMap<String, HashMap<String, String>> diseaseMap = HTTPExpInfo.getDiseaseInfo();
            HashMap<String, String> diseaseData = diseaseMap.get(selectedDisease);
            String dteir = retrieveDataTypeExtendedInfoReverse(selectedDataType);
            String platform = diseaseData.get(dteir.trim().toLowerCase()+"_platform");
            jComboBox3.removeAllItems();
            jComboBox3.addItem(platform);
            jComboBox4.removeAllItems();
            if (dteir.trim().toLowerCase().equals("dnaseq"))
                jComboBox4.addItem("Level_2");
            else if (!dteir.trim().toLowerCase().equals(""))
                jComboBox4.addItem("Level_3");
        }
        catch (Exception e) {}
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jComboBox6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox6ActionPerformed
        String selectedDisease = jComboBox6.getSelectedItem().toString().trim().toLowerCase();
        //System.out.println(selectedDisease);
        HTTPExpInfo.initDiseaseInfo();
        HashMap<String, HashMap<String, String>> diseaseMap = HTTPExpInfo.getDiseaseInfo();
        HashMap<String, String> diseaseData = diseaseMap.get(selectedDisease);
        HashSet<String> dataTypesExt = new HashSet<>();
        for (String dt_tmp: diseaseData.keySet()) {
            String dt = dt_tmp.split("_")[0];
            ArrayList<String> ext = retrieveDataTypeExtendedInfoForConversion(dt);
            if (!ext.isEmpty())
                dataTypesExt.addAll(ext);
        }
        ArrayList<String> dataTypesExtSorted = new ArrayList<>(dataTypesExt);
        dataTypesExtSorted.add("");
        Collections.sort(dataTypesExtSorted);
        /*for (String s: dataTypesExtSorted)
            System.err.println(s);
        System.err.println();*/
        jComboBox5.removeAllItems();
        for (String dts: dataTypesExtSorted)
            jComboBox5.addItem(dts);
    }//GEN-LAST:event_jComboBox6ActionPerformed

    private void jComboBox5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox5ActionPerformed
        try {
            String selectedDataType = jComboBox5.getSelectedItem().toString().trim().toLowerCase();
            if (selectedDataType.trim().toLowerCase().contains("copy number variations"))
                jButton7.setEnabled(true);
            else
                jButton7.setEnabled(false);
        }
        catch (Exception e) {}
    }//GEN-LAST:event_jComboBox5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        gui_mode = true;
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private static javax.swing.JRadioButton experiments_radioButton;
    private javax.swing.JButton jButton1;
    private static javax.swing.JButton jButton2;
    private static javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private static javax.swing.JButton jButton7;
    private static javax.swing.JCheckBox jCheckBox1;
    private static javax.swing.JComboBox jComboBox1;
    private static javax.swing.JComboBox jComboBox2;
    private static javax.swing.JComboBox jComboBox3;
    private static javax.swing.JComboBox jComboBox4;
    private static javax.swing.JComboBox jComboBox5;
    private static javax.swing.JComboBox jComboBox6;
    private javax.swing.JComboBox jComboBox7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private static javax.swing.JTextPane jTextPane1;
    private static javax.swing.JRadioButton metadata_radioButton;
    // End of variables declaration//GEN-END:variables

    public static String getDisease_forDownloader() {
        return (jComboBox1.getSelectedItem()).toString();
    }

    public static String getDataType_forDownloader() {
        return (jComboBox2.getSelectedItem()).toString();
    }

    public static String getPlatform_forDownloader() {
        return (jComboBox3.getSelectedItem()).toString();
    }

    public static String getLevel_forDownloader() {
        return (jComboBox4.getSelectedItem()).toString();
    }

    public static boolean getAutoExtractFlag() {
        return jCheckBox1.isSelected();
    }

    public static String getDisease_forConverter() {
        return (jComboBox6.getSelectedItem()).toString();
    }

    public static String getDataType_forConverter() {
        return (jComboBox5.getSelectedItem()).toString();
    }

    public static String getDataSource_forConverter() {
        return dataSource;
    }

    public static String getMetaSource_forConverter() {
        return metaSource;
    }
    
    public static void printText(String text, boolean newLine) {
        if (gui_mode) {
            StyledDocument doc = jTextPane1.getStyledDocument();
            try {
                if (newLine) {
                    doc.insertString(doc.getLength(), "\n[" + (new SimpleDateFormat("yyyy/MM/dd HH:mm:ss")).format(new Date()) + "]: " + text, null);
                } else {
                    doc.insertString(doc.getLength(), text, null);
                }
            } catch (Exception e) {
            }
        }
    }

    private String retrieveDataTypeExtendedInfo(String dataType) {
        String result = "";
        switch (dataType.toLowerCase()) {
            case "dnamethylation450":
                result = "DNA Methylation 450";
                break;
            case "dnamethylation27":
                result = "DNA Methylation 27";
                break;
            case "dnaseq":
                result = "Somatic Mutations";
                break;
            case "rnaseq":
                result = "RNA-Seq";
                break;
            case "rnaseqv2":
                result = "RNA-Seq V2";
                break;
            case "mirnaseq":
                result = "miRNASeq";
                break;
            case "cnv":
                result = "Copy Number Variations";
                break;
        }
        return result;
    }
    
    private ArrayList<String> retrieveDataTypeExtendedInfoForConversion(String dataType) {
        ArrayList<String> result = new ArrayList<>();
        switch (dataType.toLowerCase()) {
            case "dnamethylation450":
                result.add("DNA Methylation 450");
                break;
            case "dnamethylation27":
                result.add("DNA Methylation 27");
                break;
            case "dnaseq":
                result.add("Somatic Mutations");
                break;
            case "rnaseq":
                result.add("RNA-Seq gene-quantification");
                result.add("RNA-Seq exon-quantification");
                result.add("RNA-Seq spljxn-quantification");
                break;
            case "rnaseqv2":
                result.add("RNA-Seq V2 gene-quantification");
                result.add("RNA-Seq V2 exon-quantification");
                result.add("RNA-Seq V2 spljxn-quantification");
                result.add("RNA-Seq V2 isoform-quantification");
                break;
            case "mirnaseq":
                result.add("miRNASeq isoform-quantification");
                result.add("miRNASeq mirna-quantification");
                break;
            case "cnv":
                result.add("Copy Number Variations");
                break;
        }
        return result;
    }
    
    private String retrieveDataTypeExtendedInfoReverse(String dataTypeExt) {
        String result = "";
        switch (dataTypeExt.toLowerCase()) {
            case "dna methylation 450":
                result = "dnamethylation450";
                break;
            case "dna methylation 27":
                result = "dnamethylation27";
                break;
            case "somatic mutations":
                result = "dnaseq";
                break;
            case "rna-seq":
                result = "rnaseq";
                break;
            case "rna-seq v2":
                result = "rnaseqv2";
                break;
            case "mirnaseq":
                result = "mirnaseq";
                break;
            case "copy number variations":
                result = "cnv";
                break;
        }
        return result;
    }
    
    // data = 0
    // subdata = 1
    private String retrieveInfoFromDataType(String dataType, int dataORsubdata) {
        String result = "";
        switch (dataType.toLowerCase()) {
            case "dna methylation 450":
                result = (dataORsubdata == 0) ? "DNAMethylation450" : "";
                break;
            case "dna methylation 27":
                result = (dataORsubdata == 0) ? "DNAMethylation27" : "";
                break;
            case "somatic mutations":
                result = (dataORsubdata == 0) ? "DNASeq" : "";
                break;
            case "rna-seq gene-quantification":
                result = (dataORsubdata == 0) ? "RNASeq" : "gene";
                break;
            case "rna-seq exon-quantification":
                result = (dataORsubdata == 0) ? "RNASeq" : "exon";
                break;
            case "rna-seq spljxn-quantification":
                result = (dataORsubdata == 0) ? "RNASeq" : "spljxn";
                break;
            case "rna-seq v2 gene-quantification":
                result = (dataORsubdata == 0) ? "RNASeqV2" : "gene";
                break;
            case "rna-seq v2 exon-quantification":
                result = (dataORsubdata == 0) ? "RNASeqV2" : "exon";
                break;
            case "rna-seq v2 spljxn-quantification":
                result = (dataORsubdata == 0) ? "RNASeqV2" : "spljxn";
                break;
            case "rna-seq v2 isoform-quantification":
                result = (dataORsubdata == 0) ? "RNASeqV2" : "isoform";
                break;
            case "mirnaseq isoform-quantification":
                result = (dataORsubdata == 0) ? "miRNASeq" : "isoform";
                break;
            case "mirnaseq mirna-quantification":
                result = (dataORsubdata == 0) ? "miRNASeq" : "mirna";
                break;
            case "copy number variations":
                result = (dataORsubdata == 0) ? "CNV" : "";
        }
        return result;
    }

}
